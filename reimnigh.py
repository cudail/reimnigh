#!/usr/bin/env python

# ¬© 2020 Caoimhe N√≠ Chaoimh
# CC BY-NC-SA 4.0

from copy import deepcopy
from enum import Enum, auto
from re import sub, findall
from typing import List

# vowels
guta√≠ = "aouie√°√≥√∫√≠√©"


# count the number of syllables in a word by counting clusters of vowels
def comhair_siolla√≠(focal: str) -> int:
	return len(findall(f"[{guta√≠}]+[^{guta√≠}]+", focal))


# eclipsis
def uraigh(litir: str) -> str:
	return {'b': 'm', 'c': 'g', 'd': 'n', 'f': 'bh', 'g': 'n', 'p': 'b', 't': 'd'}.get(litir)


# strip fada from vowels
def cuir_fada(litir: str) -> str:
	return {'√°': 'a', '√≥': 'o', '√∫': 'u', '√≠': 'i', '√©': 'e'}.get(litir) or litir


# is this letter leniteable?
def is_ins√©imhithe(litir: str) -> bool:
	return litir in ['b', 'c', 'd', 'f', 'g', 'm', 'p', 's', 't']


# is this a vowel?
def is_guta(litir: str) -> bool:
	return litir.casefold() in guta√≠


# does this string end in a slender vowel?
def is_caol(focal: str) -> bool:
	guta = guta_deireanach(focal)
	if guta:
		return guta in "e√©i√≠"


# what is the last vowel in this string?
def guta_deireanach(focal: str) -> str:
	guta√≠_amh√°in = [litir for litir in focal if is_guta(litir)]
	if guta√≠_amh√°in:
		return guta√≠_amh√°in[-1]


# get slender or broad form of given ending
# slender form -> remove letters encased in []
# broad formn -> remove letters encased in ()
def leath_n√≥_caolaigh(deireadh: str, caol: bool) -> str:
	if caol:
		return sub(r"\[\w+\]|[()]", "", deireadh)
	else:
		return sub(r"\(\w+\)|[\[\]]", "", deireadh)


# highlight string if ANSI highlights are enabled
def aibhsigh(teaghr√°n: str) -> str:
	return f"[01m{teaghr√°n}[21m"


# underline string if ANSI highlights are enabled
def fol√≠nigh(teaghr√°n: str) -> str:
	return f"[04m{teaghr√°n}[24m"


# remove ASCI escape sequences
def neamhaibhsigh(teaghr√°n: str) -> str:
	return sub(r"\[\d\dm", "", teaghr√°n)


# analytic, synthetic or infinitive form
class Foirm(Enum):
	scartha = auto()
	t√°ite = auto()
	infinideach = auto()


# options for tenses
class FoghaAimsire(Enum):
	def __init__(self, ainm):
		self.ainm = ainm

	chaite = "an aimsir chaite"
	ghn√°thchaite = "an aimsir ghn√°thchaite"
	l√°ithreach = "an aimsir l√°ithreach"
	fh√°istineach = "an aimsir fh√°istineach"
	foshuiteach = "an modh foshuiteach"
	ordaitheach = "an modh ordaitheach"
	coinn√≠ollach = "an modh coinn√≠ollach"


# options for persons
class FoghaPearsan(Enum):
	def __init__(self, forainm):
		self.forainm = forainm  # pronoun

	c√©ad_uatha = "m√©"
	dara_uatha = "t√∫"
	tr√≠√∫_uatha = "s√≠/s√©"
	c√©ad_iorla = "sinn"
	dara_iorla = "sibh"
	tr√≠√∫_iorla = "siad"
	briathar_saor = None


# options for affirmative, negative and interrogative moods
class FoghaFoirme(Enum):
	dhearfach = auto()
	dhi√∫ltach = auto()
	cheisteach = auto()


# Defines a specific form of a verb with various rules
# e.g. the first person singular affirmative form for a first conjugation verb 
#      is a synthetic form with an ending "aim" or "im"
#      -> foirm=Foirm.t√°ite, deireadh_th√°ite="[a]im" 
class Leagan:
	def __init__(self, *, m√≠r:str=None, ur√∫:bool=None, s√©imhi√∫:bool=None,
	             forainmnigh:bool=None, foirm:Foirm=None, deireadh_th√°ite:str=None):
		self.m√≠r = m√≠r
		self.ur√∫ = ur√∫
		self.s√©imhi√∫ = s√©imhi√∫
		self.foirm = foirm
		self.deireadh_th√°ite = deireadh_th√°ite
		self.forainmnigh = forainmnigh
		self.mumhan = None

	# conjugate
	def r√©imnigh(self, briathar, deireadh_scartha, leaganacha, forainm, mumhan, aibhsi√∫):
		aschur = []  # output stored in list
		leagan = (mumhan and self.mumhan) and self.mumhan or self  # check if we're using the Munster form

		for bunleagan in leaganacha:
			# Build rules from hierarchy. If this object has a rule specified itself, use that
			# otherwise check if the base form for this tense has it defined
			foirm = leagan.foirm or bunleagan and bunleagan.forainmnigh or Foirm.t√°ite  # synthetic form if not specified otherwise
			m√≠r = leagan.m√≠r is None and (bunleagan is None or None or bunleagan.m√≠r) or leagan.m√≠r
			ur√∫ = leagan.ur√∫ is None and (bunleagan is None or None or bunleagan.ur√∫) or leagan.ur√∫
			s√©imhi√∫ = leagan.s√©imhi√∫ is None and (bunleagan is None or None or bunleagan.s√©imhi√∫) or leagan.s√©imhi√∫
			forainmnigh = leagan.forainmnigh is None and (bunleagan is None or None or bunleagan.forainmnigh) or leagan.forainmnigh

			# from stems for verbs ending in -igh, il, ir, in and is
			if len(briathar) > 2 and briathar[-3:] in ['igh', '√≠gh']:
				fr√©amh = sub(r"^((?:.+[^a])|.)a?[i√≠]gh$", r"\1", briathar)
			elif comhair_siolla√≠(briathar) > 1:
				fr√©amh = sub(r"^(.+[^a])[a]?i(?:([lrns])|(gh))$", r"\1\2", briathar)
			else:
				fr√©amh = briathar

			c√©ad_litir = briathar[0]  # first letter
			litreacha_eile = (foirm == Foirm.infinideach) and briathar[1:] or fr√©amh[1:]  # rest of the word

			# do we have lenition?
			s = s√©imhi√∫ and is_ins√©imhithe(c√©ad_litir) and 'h' or ''

			# prefix
			r√©imn√≠r = ur√∫ and uraigh(c√©ad_litir) or ''

			if m√≠r is None:
				m√≠r = ''
			# particles can cause mutations
			# 'go' causes vowels to take an n- prefix
			elif m√≠r == 'go' and is_guta(c√©ad_litir):
				r√©imn√≠r = 'n-'
			# 'n√°' causes vowels to take a h- prefix
			elif m√≠r == 'n√°' and is_guta(c√©ad_litir):
				r√©imn√≠r = 'h'
			# 'do' is supressed unless the verb starts with a vowel or we're using the Munster dialect
			elif m√≠r == 'do':
				if is_guta(c√©ad_litir) or (c√©ad_litir == 'f' and s == 'h'):
					r√©imn√≠r = "d'"
					# hack to supress d' prefix for past tense autonomous form
					if forainm is None and leagan.deireadh_th√°ite.endswith("dh"):
						r√©imn√≠r = ''
					m√≠r = ''
				else:
					m√≠r = mumhan and 'do' or ''

			# is our stem slender or broad?
			caol = is_caol(fr√©amh)

			# -√°il becomes -√°l unless we have an analytic form ending that starts with 't'
			# in which case it stays as -√°il and takes a slender ending
			if briathar[-3:] == '√°il' and litreacha_eile[-2:] == '√°l' and foirm == Foirm.t√°ite and leagan.deireadh_th√°ite[0] == 't':
				caol = True
				litreacha_eile = litreacha_eile[:-2] + '√°il'
			elif (briathar[-4:] in ['√≥igh', '√∫igh', '√°igh'] or briathar[-5:] in ['eoigh', 'uaigh']) and foirm == Foirm.t√°ite and leagan.deireadh_th√°ite[0] == 't':
				caol = True
				litreacha_eile = litreacha_eile + 'i'

			if caol is None: caol = is_caol(briathar)

			# form the ending
			if foirm == Foirm.t√°ite:
				deireadh = leath_n√≥_caolaigh(leagan.deireadh_th√°ite, caol)  # form the analytic ending
			elif foirm == Foirm.scartha:
				deireadh = leath_n√≥_caolaigh(deireadh_scartha, caol)  # form the synthetic ending
			else:
				deireadh = ''

			# remove double vowels if the stem ends with the same letter the ending starts with
			if deireadh and fr√©amh and cuir_fada(fr√©amh[-1]).casefold() == cuir_fada(deireadh[0]).casefold():
				deireadh = deireadh[1:]
			# if stem ends in √≥ or √∫ and ending ends in a, remove the a
			elif deireadh and litreacha_eile and litreacha_eile[-1] in ['√≥', '√∫', 'o'] and deireadh[0] == 'a':
				deireadh = deireadh[1:]
			elif deireadh and comhair_siolla√≠(briathar) == 1 and (deireadh[0] == 't' or deireadh[0] == 'f') and fr√©amh[-1] == '√©':
				deireadh = f"i{deireadh}"
			# analytic 3rd person plural Munster forms that would normally end in an lenited d end in an unlenited d instead 
			if mumhan and foirm == Foirm.scartha and forainm == 'siad' and deireadh[-3:] == 'idh':
				deireadh = deireadh[:-1]

			# if we didn't specify if pronouns should be shown or not
			# then show them unless we're using a synthetic form
			if forainmnigh is False or forainmnigh is None and foirm == Foirm.t√°ite:
				forainm = ''

			if aibhsi√∫:
				focal = f"{aibhsigh(r√©imn√≠r)}{c√©ad_litir}{aibhsigh(s)}{litreacha_eile}{aibhsigh(deireadh)}"
				aschur.append(f"{m√≠r and m√≠r + ' ' or ''}{focal}{forainm and ' ' + aibhsigh(forainm) or ''}")
			else:
				focal = f"{r√©imn√≠r}{c√©ad_litir}{s}{litreacha_eile}{deireadh}"
				aschur.append(f"{m√≠r and m√≠r + ' ' or ''}{focal}{forainm and ' ' + forainm or ''}")
		return aschur


# Person
class Pearsa:
	def __init__(self):
		self.uatha = None
		self.iorla = None


# Tense
class Aimsir:
	def __init__(self, ainm: str):
		self.ainm = ainm
		self.c√©ad_phearsa = Pearsa()
		self.dara_pearsa = Pearsa()
		self.tr√≠√∫_pearsa = Pearsa()
		self.deireadh_scartha = ""
		self.deireadh_scartha_mumhan = None
		self.briathar_saor = None
		self.dearfach = Leagan()
		self.di√∫ltach = Leagan(m√≠r='n√≠', s√©imhi√∫=True)
		self.ceisteach = Leagan(m√≠r='an', ur√∫=True)


# Conjugation
class R√©imni√∫:
	def __init__(self):
		self.a_chaite = Aimsir("an aimsir chaite")
		self.a_gchaite = Aimsir("an aimsir ghn√°thchaite")
		self.a_l√°ith = Aimsir("an aimsir l√°ithreach")
		self.a_fh√°ist = Aimsir("an aimsir fh√°istineach")
		self.m_fosh = Aimsir("an modh foshuiteach")
		self.m_ord = Aimsir("an modh ordaitheach")
		self.m_coinn = Aimsir("an modh coinn√≠ollach")
		self.aimsir√≠ = {FoghaAimsire.chaite: self.a_chaite,
		                FoghaAimsire.ghn√°thchaite: self.a_gchaite,
		                FoghaAimsire.l√°ithreach: self.a_l√°ith,
		                FoghaAimsire.fh√°istineach: self.a_fh√°ist,
		                FoghaAimsire.foshuiteach: self.m_fosh,
		                FoghaAimsire.ordaitheach: self.m_ord,
		                FoghaAimsire.coinn√≠ollach: self.m_coinn}

	# conjugate
	def r√©imnigh(self, fr√©amh: str, foghannaAimsir√≠: list, foghannaPearsana: list, foghannaFoirmeacha: list, mumhan: bool, aibhsigh: bool):
		aschur = []
		for a in foghannaAimsir√≠:
			aimsir = self.aimsir√≠.get(a)
			foirmeacha = []

			for f in foghannaFoirmeacha:
				if f == FoghaFoirme.dhearfach and aimsir.dearfach:
					foirmeacha.append(aimsir.dearfach)
				if f == FoghaFoirme.dhi√∫ltach and aimsir.di√∫ltach:
					foirmeacha.append(aimsir.di√∫ltach)
				if f == FoghaFoirme.cheisteach and aimsir.ceisteach:
					foirmeacha.append(aimsir.ceisteach)

			deireadh = (mumhan and aimsir.deireadh_scartha_mumhan) and aimsir.deireadh_scartha_mumhan or aimsir.deireadh_scartha
			pearsana = []
			aschur_aimsire = {'ainm': aimsir.ainm, 'pearsana': pearsana}
			for p in foghannaPearsana:
				if p == FoghaPearsan.c√©ad_uatha:
					pearsana.append(aimsir.c√©ad_phearsa.uatha.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
				if p == FoghaPearsan.dara_uatha:
					pearsana.append(aimsir.dara_pearsa.uatha.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
				if p == FoghaPearsan.tr√≠√∫_uatha:
					pearsana.append(aimsir.tr√≠√∫_pearsa.uatha.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
				if p == FoghaPearsan.c√©ad_iorla:
					pearsana.append(aimsir.c√©ad_phearsa.iorla.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
				if p == FoghaPearsan.dara_iorla:
					pearsana.append(aimsir.dara_pearsa.iorla.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
				if p == FoghaPearsan.tr√≠√∫_iorla:
					pearsana.append(aimsir.tr√≠√∫_pearsa.iorla.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
				if p == FoghaPearsan.briathar_saor:
					pearsana.append(aimsir.briathar_saor.r√©imnigh(fr√©amh, deireadh, foirmeacha, p.forainm, mumhan, aibhsigh))
			aschur.append(aschur_aimsire)
		return aschur


# define conjugation rules
def d√©an_rialacha():
	# first conjugation
	c√©ad_r√©imni√∫ = R√©imni√∫()

	c√©ad_r√©imni√∫.a_chaite.dearfach  = Leagan(m√≠r='do',   s√©imhi√∫=True)
	c√©ad_r√©imni√∫.a_chaite.di√∫ltach  = Leagan(m√≠r='n√≠or', s√©imhi√∫=True)
	c√©ad_r√©imni√∫.a_chaite.ceisteach = Leagan(m√≠r='ar',   s√©imhi√∫=True)
	c√©ad_r√©imni√∫.a_chaite.c√©ad_phearsa.uatha = Leagan(foirm=Foirm.infinideach)
	c√©ad_r√©imni√∫.a_chaite.dara_pearsa.uatha  = Leagan(foirm=Foirm.infinideach)
	c√©ad_r√©imni√∫.a_chaite.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.infinideach)
	c√©ad_r√©imni√∫.a_chaite.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="(e)amar")
	c√©ad_r√©imni√∫.a_chaite.dara_pearsa.iorla  = Leagan(foirm=Foirm.infinideach)
	c√©ad_r√©imni√∫.a_chaite.tr√≠√∫_pearsa.iorla  = Leagan(foirm=Foirm.infinideach)
	c√©ad_r√©imni√∫.a_chaite.briathar_saor      = Leagan(s√©imhi√∫=False, deireadh_th√°ite="(e)adh")

	c√©ad_r√©imni√∫.a_chaite.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="(e)as")
	c√©ad_r√©imni√∫.a_chaite.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]is")
	c√©ad_r√©imni√∫.a_chaite.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="(e)amair")
	c√©ad_r√©imni√∫.a_chaite.dara_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="(e)abhair")
	c√©ad_r√©imni√∫.a_chaite.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="(e)adar")
	c√©ad_r√©imni√∫.a_chaite.briathar_saor.mumhan      = Leagan(s√©imhi√∫=False, deireadh_th√°ite="(e)adh")


	c√©ad_r√©imni√∫.a_gchaite.deireadh_scartha = "(e)adh"
	c√©ad_r√©imni√∫.a_gchaite.dearfach  = Leagan(m√≠r='do', s√©imhi√∫=True)
	c√©ad_r√©imni√∫.a_gchaite.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[a]inn")
	c√©ad_r√©imni√∫.a_gchaite.dara_pearsa.uatha  = Leagan(deireadh_th√°ite="t(e)√°")
	c√©ad_r√©imni√∫.a_gchaite.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_gchaite.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]imis")
	c√©ad_r√©imni√∫.a_gchaite.dara_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_gchaite.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="[a]id√≠s")
	c√©ad_r√©imni√∫.a_gchaite.briathar_saor      = Leagan(deireadh_th√°ite="t[a]√≠")

	c√©ad_r√©imni√∫.a_gchaite.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="th(e)√°")
	c√©ad_r√©imni√∫.a_gchaite.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]im√≠s")
	c√©ad_r√©imni√∫.a_gchaite.briathar_saor.mumhan      = Leagan(s√©imhi√∫=False, deireadh_th√°ite="t√≠")


	c√©ad_r√©imni√∫.a_l√°ith.deireadh_scartha = "(e)ann"
	c√©ad_r√©imni√∫.a_l√°ith.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[a]im")
	c√©ad_r√©imni√∫.a_l√°ith.dara_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_l√°ith.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_l√°ith.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]imid")
	c√©ad_r√©imni√∫.a_l√°ith.dara_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_l√°ith.tr√≠√∫_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_l√°ith.briathar_saor      = Leagan(deireadh_th√°ite="t(e)ar")

	c√©ad_r√©imni√∫.a_l√°ith.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]ir")
	c√©ad_r√©imni√∫.a_l√°ith.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]im√≠d")
	c√©ad_r√©imni√∫.a_l√°ith.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]id", forainmnigh=True)


	c√©ad_r√©imni√∫.a_fh√°ist.deireadh_scartha = "f[a]idh"
	c√©ad_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.uatha = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_fh√°ist.dara_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_fh√°ist.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="f[a]imid")
	c√©ad_r√©imni√∫.a_fh√°ist.dara_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_fh√°ist.tr√≠√∫_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.a_fh√°ist.briathar_saor      = Leagan(deireadh_th√°ite="f(e)ar")

	c√©ad_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="f(e)ad")
	c√©ad_r√©imni√∫.a_fh√°ist.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="f[a]ir")
	c√©ad_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="f[a]im√≠d")


	c√©ad_r√©imni√∫.m_fosh.deireadh_scartha = "[a](e)"
	c√©ad_r√©imni√∫.m_fosh.dearfach  = Leagan(m√≠r='go', ur√∫=True)
	c√©ad_r√©imni√∫.m_fosh.di√∫ltach  = Leagan(m√≠r='n√°r', s√©imhi√∫=True)
	c√©ad_r√©imni√∫.m_fosh.ceisteach = None
	c√©ad_r√©imni√∫.m_fosh.c√©ad_phearsa.uatha = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_fosh.dara_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_fosh.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_fosh.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]imid")
	c√©ad_r√©imni√∫.m_fosh.dara_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_fosh.tr√≠√∫_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_fosh.briathar_saor      = Leagan(deireadh_th√°ite="t(e)ar")

	c√©ad_r√©imni√∫.m_fosh.deireadh_scartha_mumhan = "(e)aidh"
	c√©ad_r√©imni√∫.m_fosh.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="(e)ad")
	c√©ad_r√©imni√∫.m_fosh.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]ir")


	c√©ad_r√©imni√∫.m_ord.deireadh_scartha = "(e)adh"
	c√©ad_r√©imni√∫.m_ord.di√∫ltach  = Leagan(m√≠r='n√°')
	c√©ad_r√©imni√∫.m_ord.ceisteach = None
	c√©ad_r√©imni√∫.m_ord.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[a]im")
	c√©ad_r√©imni√∫.m_ord.dara_pearsa.uatha  = Leagan(foirm=Foirm.infinideach, forainmnigh=False)
	c√©ad_r√©imni√∫.m_ord.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_ord.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]imis")
	c√©ad_r√©imni√∫.m_ord.dara_pearsa.iorla  = Leagan(deireadh_th√°ite="[a]ig√≠")
	c√©ad_r√©imni√∫.m_ord.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="[a]id√≠s")
	c√©ad_r√©imni√∫.m_ord.briathar_saor      = Leagan(deireadh_th√°ite="t(e)ar")

	c√©ad_r√©imni√∫.m_ord.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]im√≠s")
	c√©ad_r√©imni√∫.m_ord.dara_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]idh")


	c√©ad_r√©imni√∫.m_coinn.deireadh_scartha = "f(e)adh"
	c√©ad_r√©imni√∫.m_coinn.dearfach = Leagan(m√≠r='do', s√©imhi√∫=True)
	c√©ad_r√©imni√∫.m_coinn.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="f[a]inn")
	c√©ad_r√©imni√∫.m_coinn.dara_pearsa.uatha  = Leagan(deireadh_th√°ite="f(e)√°")
	c√©ad_r√©imni√∫.m_coinn.tr√≠√∫_pearsa.uatha  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_coinn.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="f[a]imis")
	c√©ad_r√©imni√∫.m_coinn.dara_pearsa.iorla  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫.m_coinn.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="f[a]id√≠s")
	c√©ad_r√©imni√∫.m_coinn.briathar_saor      = Leagan(deireadh_th√°ite="f[a]√≠")

	c√©ad_r√©imni√∫.m_coinn.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="f[a]im√≠s")
	c√©ad_r√©imni√∫.m_coinn.briathar_saor.mumhan      = Leagan(s√©imhi√∫=False, deireadh_th√°ite="f√≠")


	# second conjugation
	dara_r√©imni√∫ = deepcopy(c√©ad_r√©imni√∫)

	dara_r√©imni√∫.a_chaite.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]√≠omar")
	dara_r√©imni√∫.a_chaite.briathar_saor      = Leagan(s√©imhi√∫=False, deireadh_th√°ite="[a]√≠odh")

	dara_r√©imni√∫.a_chaite.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="[a]√≠os")
	dara_r√©imni√∫.a_chaite.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]√≠s")
	dara_r√©imni√∫.a_chaite.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]√≠omair")
	dara_r√©imni√∫.a_chaite.dara_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]√≠obhair")
	dara_r√©imni√∫.a_chaite.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]√≠odar")

	dara_r√©imni√∫.a_gchaite.deireadh_scartha = "[a]√≠odh"
	dara_r√©imni√∫.a_gchaite.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[a]√≠nn")
	dara_r√©imni√∫.a_gchaite.dara_pearsa.uatha  = Leagan(deireadh_th√°ite="[a]√≠te√°")
	dara_r√©imni√∫.a_gchaite.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]√≠mis")
	dara_r√©imni√∫.a_gchaite.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="[a]√≠d√≠s")
	dara_r√©imni√∫.a_gchaite.briathar_saor      = Leagan(deireadh_th√°ite="[a]√≠t√≠")

	dara_r√©imni√∫.a_gchaite.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]√≠th√°")
	dara_r√©imni√∫.a_gchaite.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]√≠m√≠s")


	dara_r√©imni√∫.a_l√°ith.deireadh_scartha = "[a]√≠onn"
	dara_r√©imni√∫.a_l√°ith.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[a]√≠m")
	dara_r√©imni√∫.a_l√°ith.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]√≠mid")
	dara_r√©imni√∫.a_l√°ith.briathar_saor      = Leagan(deireadh_th√°ite="[a]√≠tear")
	dara_r√©imni√∫.a_l√°ith.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]√≠mid")

	dara_r√©imni√∫.a_l√°ith.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]√≠r")
	dara_r√©imni√∫.a_l√°ith.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]√≠m√≠d")
	dara_r√©imni√∫.a_l√°ith.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]√≠d", forainmnigh=True)
	dara_r√©imni√∫.a_l√°ith.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="[a]√≠thear")

	dara_r√©imni√∫.a_fh√°ist.deireadh_scartha = "[√≥](eo)idh"
	dara_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[√≥](eo)imid")
	dara_r√©imni√∫.a_fh√°ist.briathar_saor      = Leagan(deireadh_th√°ite="[√≥](eo)far")

	dara_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="[√≥](eo)d")
	dara_r√©imni√∫.a_fh√°ist.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[√≥](eo)ir")
	dara_r√©imni√∫.a_fh√°ist.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[√≥](eo)im√≠d")

	dara_r√©imni√∫.m_fosh.deireadh_scartha = "[a]√≠"
	dara_r√©imni√∫.m_fosh.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]√≠mid")
	dara_r√©imni√∫.m_fosh.briathar_saor      = Leagan(deireadh_th√°ite="[a]√≠tear")

	dara_r√©imni√∫.m_fosh.deireadh_scartha_mumhan = "[a]√≠dh"
	dara_r√©imni√∫.m_fosh.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="[a]√≠od")
	dara_r√©imni√∫.m_fosh.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="[a]√≠r")
	dara_r√©imni√∫.m_fosh.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]√≠m√≠d")
	dara_r√©imni√∫.m_fosh.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]√≠d", forainmnigh=True)
	dara_r√©imni√∫.m_fosh.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="[a]√≠thear")

	dara_r√©imni√∫.m_ord.deireadh_scartha = "[a]√≠odh"
	dara_r√©imni√∫.m_ord.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[a]√≠m")
	dara_r√©imni√∫.m_ord.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[a]√≠mis")
	dara_r√©imni√∫.m_ord.dara_pearsa.iorla  = Leagan(deireadh_th√°ite="[a]√≠g√≠")
	dara_r√©imni√∫.m_ord.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="[a]√≠d√≠s")
	dara_r√©imni√∫.m_ord.briathar_saor      = Leagan(deireadh_th√°ite="[a]√≠tear")

	dara_r√©imni√∫.m_ord.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[a]√≠m√≠s")
	dara_r√©imni√∫.m_ord.dara_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="[a]√≠dh")
	dara_r√©imni√∫.m_ord.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="[a]√≠thear")


	dara_r√©imni√∫.m_coinn.deireadh_scartha = "[√≥](eo)dh"
	dara_r√©imni√∫.m_coinn.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="[√≥](eo)inn")
	dara_r√©imni√∫.m_coinn.dara_pearsa.uatha  = Leagan(deireadh_th√°ite="[√≥](eo)f√°")
	dara_r√©imni√∫.m_coinn.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="[√≥](eo)imis")
	dara_r√©imni√∫.m_coinn.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="[√≥](eo)id√≠s")
	dara_r√©imni√∫.m_coinn.briathar_saor      = Leagan(deireadh_th√°ite="[√≥](eo)fa√≠")

	dara_r√©imni√∫.m_coinn.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="[√≥](eo)im√≠s")


	# first conjugation, special case for verbs ending in -igh
	c√©ad_r√©imni√∫_igh = deepcopy(c√©ad_r√©imni√∫)

	c√©ad_r√©imni√∫_igh.a_chaite.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠omar")
	c√©ad_r√©imni√∫_igh.a_chaite.briathar_saor      = Leagan(deireadh_th√°ite="√≠odh")

	c√©ad_r√©imni√∫_igh.a_chaite.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="√≠os")
	c√©ad_r√©imni√∫_igh.a_chaite.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="√≠s")
	c√©ad_r√©imni√∫_igh.a_chaite.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠omair")
	c√©ad_r√©imni√∫_igh.a_chaite.dara_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠obhair")
	c√©ad_r√©imni√∫_igh.a_chaite.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠odar")


	c√©ad_r√©imni√∫_igh.a_gchaite.deireadh_scartha = "√≠odh"
	c√©ad_r√©imni√∫_igh.a_gchaite.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="√≠nn")
	c√©ad_r√©imni√∫_igh.a_gchaite.dara_pearsa.uatha  = Leagan(deireadh_th√°ite="ite√°")
	c√©ad_r√©imni√∫_igh.a_gchaite.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠mis")
	c√©ad_r√©imni√∫_igh.a_gchaite.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="√≠d√≠s")
	c√©ad_r√©imni√∫_igh.a_gchaite.briathar_saor      = Leagan(deireadh_th√°ite="it√≠")

	c√©ad_r√©imni√∫_igh.a_gchaite.dara_pearsa.uatha.mumhan =  Leagan(deireadh_th√°ite="√≠th√°")
	c√©ad_r√©imni√∫_igh.a_gchaite.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠m√≠s")
	c√©ad_r√©imni√∫_igh.a_gchaite.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠d√≠s")
	c√©ad_r√©imni√∫_igh.a_gchaite.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="√≠t√≠")


	c√©ad_r√©imni√∫_igh.a_l√°ith.deireadh_scartha = "√≠onn"
	c√©ad_r√©imni√∫_igh.a_l√°ith.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="√≠m")
	c√©ad_r√©imni√∫_igh.a_l√°ith.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠mid")
	c√©ad_r√©imni√∫_igh.a_l√°ith.briathar_saor      = Leagan(deireadh_th√°ite="itear")

	c√©ad_r√©imni√∫_igh.a_l√°ith.dara_pearsa.uatha.mumhan  = Leagan(foirm=Foirm.scartha)
	c√©ad_r√©imni√∫_igh.a_l√°ith.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠m√≠d")
	c√©ad_r√©imni√∫_igh.a_l√°ith.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠d", forainmnigh=True)


	c√©ad_r√©imni√∫_igh.a_fh√°ist.deireadh_scartha = "√≠fidh"
	c√©ad_r√©imni√∫_igh.a_fh√°ist.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠fimid")
	c√©ad_r√©imni√∫_igh.a_fh√°ist.briathar_saor      = Leagan(deireadh_th√°ite="√≠fear")

	c√©ad_r√©imni√∫_igh.a_fh√°ist.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="√≠fead")
	c√©ad_r√©imni√∫_igh.a_fh√°ist.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="√≠fir")
	c√©ad_r√©imni√∫_igh.a_fh√°ist.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠fim√≠d")
	c√©ad_r√©imni√∫_igh.a_fh√°ist.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠fid", forainmnigh=True)
	c√©ad_r√©imni√∫_igh.a_fh√°ist.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="√≠far")



	c√©ad_r√©imni√∫_igh.m_fosh.deireadh_scartha = "√≠"
	c√©ad_r√©imni√∫_igh.m_fosh.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠mid")
	c√©ad_r√©imni√∫_igh.m_fosh.briathar_saor      = Leagan(deireadh_th√°ite="itear")

	c√©ad_r√©imni√∫_igh.m_fosh.deireadh_scartha_mumhan = "√≠dh"
	c√©ad_r√©imni√∫_igh.m_fosh.c√©ad_phearsa.uatha.mumhan = Leagan(deireadh_th√°ite="√≠od")
	c√©ad_r√©imni√∫_igh.m_fosh.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="√≠r")
	c√©ad_r√©imni√∫_igh.m_fosh.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠m√≠d")
	c√©ad_r√©imni√∫_igh.m_fosh.tr√≠√∫_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠d", forainmnigh=True)
	c√©ad_r√©imni√∫_igh.m_fosh.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="√≠tear")


	c√©ad_r√©imni√∫_igh.m_ord.deireadh_scartha = "√≠odh"
	c√©ad_r√©imni√∫_igh.m_ord.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="√≠m")
	c√©ad_r√©imni√∫_igh.m_ord.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠mis")
	c√©ad_r√©imni√∫_igh.m_ord.dara_pearsa.iorla  = Leagan(deireadh_th√°ite="√≠g√≠")
	c√©ad_r√©imni√∫_igh.m_ord.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="√≠d√≠s")
	c√©ad_r√©imni√∫_igh.m_ord.briathar_saor      = Leagan(deireadh_th√°ite="itear")

	c√©ad_r√©imni√∫_igh.m_ord.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠m√≠s")
	c√©ad_r√©imni√∫_igh.m_ord.dara_pearsa.iorla.mumhan  = Leagan(deireadh_th√°ite="√≠dh")
	c√©ad_r√©imni√∫_igh.m_ord.briathar_saor.mumhan      = Leagan(deireadh_th√°ite="√≠tear")


	c√©ad_r√©imni√∫_igh.m_coinn.deireadh_scartha = "√≠feadh"
	c√©ad_r√©imni√∫_igh.m_coinn.c√©ad_phearsa.uatha = Leagan(deireadh_th√°ite="√≠finn")
	c√©ad_r√©imni√∫_igh.m_coinn.dara_pearsa.uatha  = Leagan(deireadh_th√°ite="√≠fe√°")
	c√©ad_r√©imni√∫_igh.m_coinn.c√©ad_phearsa.iorla = Leagan(deireadh_th√°ite="√≠fimis")
	c√©ad_r√©imni√∫_igh.m_coinn.tr√≠√∫_pearsa.iorla  = Leagan(deireadh_th√°ite="√≠fid√≠s")
	c√©ad_r√©imni√∫_igh.m_coinn.briathar_saor      = Leagan(deireadh_th√°ite="√≠f√≠")

	c√©ad_r√©imni√∫_igh.m_coinn.dara_pearsa.uatha.mumhan  = Leagan(deireadh_th√°ite="√≠f√°")
	c√©ad_r√©imni√∫_igh.m_coinn.c√©ad_phearsa.iorla.mumhan = Leagan(deireadh_th√°ite="√≠fim√≠s")

	return {1: c√©ad_r√©imni√∫, 1.5: c√©ad_r√©imni√∫_igh, 2: dara_r√©imni√∫}


# detect which conjugation a verb is part of
def c√©n_r√©imni√∫(briathar: str) -> R√©imni√∫:
	if comhair_siolla√≠(briathar) > 1:
		if briathar[-3:] == 'igh' or briathar[-2:] in ['ir', 'il', 'in', 'is']:
			if briathar[-3:] not in ['√°il', '√°in', '√≥il', '√∫ir']:
				return d√©an_rialacha().get(2)
	if briathar[-3:] in ['igh', '√≠gh'] and briathar[-4:] not in ['√©igh', '√≥igh', '√∫igh', '√°igh'] and briathar[-5:] not in ['eoigh', 'uaigh']:
		return d√©an_rialacha().get(1.5)
	return d√©an_rialacha().get(1)


# print results
def priont√°il_toradh(toradh: List, aibhsi√∫: bool = False):
	leithid_col√∫n = {}
	for aimsir in toradh:
		for r√≥ in aimsir['pearsana']:
			for i, cill in enumerate(r√≥):
				fad = len(neamhaibhsigh(cill))
				if leithid_col√∫n.get(i) is None or fad > leithid_col√∫n.get(i):
					leithid_col√∫n[i] = fad
	for aimsir in toradh:
		# if more than one tense was specified, print the name of each tense
		if len(toradh) > 1:
			if aibhsi√∫:
				print(f"  {fol√≠nigh(aimsir['ainm'])}")
			else:
				print(f"  {aimsir['ainm']}")
		for r√≥ in aimsir['pearsana']:
			l√≠ne = ""
			for i, cill in enumerate(r√≥):
				l√≠ne += cill + " " * (leithid_col√∫n[i] - len(neamhaibhsigh(cill)) + 4)
			print(l√≠ne)
		# print an empty line between each tense
		if aimsir != toradh[-1]:
			print()


def r√©imnigh(briathar: str, aimsir√≠: list = FoghaAimsire, pearsana: list = FoghaPearsan, foirmeacha: list = FoghaFoirme, mumhan: bool = False, aibhsigh: bool = False):
	return c√©n_r√©imni√∫(briathar).r√©imnigh(briathar, aimsir√≠, pearsana, foirmeacha, mumhan, aibhsigh)


if __name__ == '__main__':
	from argparse import ArgumentParser

	parser = ArgumentParser()
	parser.add_argument('briathar', type=str)

	parser.add_argument('-c', help='taispe√°ntar an aimsir chaite', action='store_true')
	parser.add_argument('-g', help='taispe√°ntar an aimsir ghn√°chchaite', action='store_true')
	parser.add_argument('-l', help='taispe√°ntar an aimsir l√°ithreach', action='store_true')
	parser.add_argument('-f', help='taispe√°ntar an aimsir fh√°istineach', action='store_true')
	parser.add_argument('-F', help='taispe√°ntar an modh foshuiteach', action='store_true')
	parser.add_argument('-o', help='taispe√°ntar an modh ordaitheach', action='store_true')
	parser.add_argument('-O', help='taispe√°ntar an modh coinn√≠ollach', action='store_true')

	parser.add_argument('-1', help='taispe√°ntar an c√©ad phearsa', action='store_true')
	parser.add_argument('-2', help='taispe√°ntar an dara pearsa', action='store_true')
	parser.add_argument('-3', help='taispe√°ntar an tr√≠√∫ pearsa', action='store_true')
	parser.add_argument('-0', help='taispe√°ntar an briathar saor', action='store_true')
	parser.add_argument('-u', help='taispe√°ntar an uatha', action='store_true')
	parser.add_argument('-i', help='taispe√°ntar an iolra', action='store_true')

	parser.add_argument('-d', help='taispe√°ntar an foirm dhearfach', action='store_true')
	parser.add_argument('-D', help='taispe√°ntar an foirm dhi√∫ltach', action='store_true')
	parser.add_argument('-C', help='taispe√°ntar an foirm cheisteach', action='store_true')

	parser.add_argument('-m', help='√∫s√°idtear an chan√∫int na Mumhan', action='store_true')

	parser.add_argument('-a', help='aibhs√≠tear athruithe', action='store_true')

	args = parser.parse_args()

	aimsir√≠ = []
	foirmeacha = []
	pearsana = []

	# what tenses are we conjugating?
	if args.c:
		aimsir√≠.append(FoghaAimsire.chaite)
	if args.g:
		aimsir√≠.append(FoghaAimsire.ghn√°thchaite)
	if args.l:
		aimsir√≠.append(FoghaAimsire.l√°ithreach)
	if args.f:
		aimsir√≠.append(FoghaAimsire.fh√°istineach)
	if args.F:
		aimsir√≠.append(FoghaAimsire.foshuiteach)
	if args.o:
		aimsir√≠.append(FoghaAimsire.ordaitheach)
	if args.O:
		aimsir√≠.append(FoghaAimsire.coinn√≠ollach)
	# if no tense is specified show all
	if not aimsir√≠:
		aimsir√≠ = FoghaAimsire

	# what forms are we showing?
	if args.d:
		foirmeacha.append(FoghaFoirme.dhearfach)
	if args.D:
		foirmeacha.append(FoghaFoirme.dhi√∫ltach)
	if args.C:
		foirmeacha.append(FoghaFoirme.cheisteach)
	# if none of affirmative, negative or interrogative forms are specified, show all of them
	if not foirmeacha:
		foirmeacha = [FoghaFoirme.dhearfach, FoghaFoirme.dhi√∫ltach, FoghaFoirme.cheisteach]

	# what persons are we using?
	briathar_saor = getattr(args, '0')
	c√©ad_phearsa = getattr(args, '1')
	dara_pearsa = getattr(args, '2')
	tr√≠√∫_pearsa = getattr(args, '3')
	uathar = args.u
	iolra = args.i
	# if no persons are specified show all
	gach_pearsana = not (c√©ad_phearsa or dara_pearsa or tr√≠√∫_pearsa) and not briathar_saor
	# if singular or plural are not specified show both
	uathar_agus_uathar = not (uathar or iolra)
	# if autonomous and either singular or plural is specified, but not 1st, 2nd or 3rd person
	# then enable 1st, 2nd and 3rd person forms as well as the autonomous forms
	if briathar_saor and not uathar_agus_uathar and not (c√©ad_phearsa or dara_pearsa or tr√≠√∫_pearsa):
		gach_pearsana = True
	if (gach_pearsana or c√©ad_phearsa) and (uathar_agus_uathar or uathar):
		pearsana.append(FoghaPearsan.c√©ad_uatha)
	if (gach_pearsana or dara_pearsa) and (uathar_agus_uathar or uathar):
		pearsana.append(FoghaPearsan.dara_uatha)
	if (gach_pearsana or tr√≠√∫_pearsa) and (uathar_agus_uathar or uathar):
		pearsana.append(FoghaPearsan.tr√≠√∫_uatha)
	if (gach_pearsana or c√©ad_phearsa) and (uathar_agus_uathar or iolra):
		pearsana.append(FoghaPearsan.c√©ad_iorla)
	if (gach_pearsana or dara_pearsa) and (uathar_agus_uathar or iolra):
		pearsana.append(FoghaPearsan.dara_iorla)
	if (gach_pearsana or tr√≠√∫_pearsa) and (uathar_agus_uathar or iolra):
		pearsana.append(FoghaPearsan.tr√≠√∫_iorla)
	if gach_pearsana or briathar_saor:
		pearsana.append(FoghaPearsan.briathar_saor)

	priont√°il_toradh(r√©imnigh(args.briathar, aimsir√≠, pearsana, foirmeacha, args.m, args.a), args.a)
